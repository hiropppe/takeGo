import pyjsonrpc
import os
import sys
import threading

from bamboo.zobrist_hash import set_hash_size, initialize_hash, initialize_uct_hash
from bamboo.models.keras_dcnn_policy import CNNPolicy
from bamboo.local_pattern import read_rands, init_d12_rsp_hash, init_x33_hash, init_d12_hash
from bamboo.rollout_preprocess import initialize_const, set_rollout_parameter, set_tree_parameter
from bamboo.tree_search import PyMCTS
from bamboo.mcts_server import set_mcts, MCTSRequestHandler


if __name__ == "__main__":
    global mcts

    import argparse
    parser = argparse.ArgumentParser(description='Run GTP')
    parser.add_argument("--policy_weights", "-W", type=str, required=True,
                        help="Policy network weights (hdf5)")
    parser.add_argument("--rollout_weights", "-Wr", type=str, required=True,
                        help="Rollout policy network weights (hdf5)")
    parser.add_argument("--tree_weights", "-Wt", type=str, required=True,
                        help="Tree policy network weights (hdf5)")
    parser.add_argument("--mt_rands_file", "-mt", type=str, required=True,
                        help="Mersenne twister random number file")
    parser.add_argument("--x33_csv", "-x33", type=str, required=True,
                        help="Non-response 3x3 pattern file")
    parser.add_argument("--d12_rsp_csv", "-rd12", type=str, required=True,
                        help="Response 12 point diamond(MD2) pattern file")
    parser.add_argument("--d12_csv", "-d12", type=str, required=True,
                        help="Non-response 12 point diamond(MD2) pattern file")
    parser.add_argument("--policy_temp", type=float, default=0.67,
                        help="Distribution temperature of players using policies (Default: 0.67)")
    parser.add_argument("--threads", "-t", type=int, default=1,
                        help="Number of search threads (Default: 1)")
    parser.add_argument("--node_hash_size", "-n", type=int, default=1048576,
                        help="MCT node hash size (Default: 2**20)")
    parser.add_argument("--host", type=str, default='localhost',
                        help="MCTS RPC server host")
    parser.add_argument("--port", "-p", type=int, default=6000,
                        help="MCTS RPC server port")
    parser.add_argument("--read_ahead", "-r", default=False, action="store_true",
                        help="Enable read-ahead pondering")
    parser.add_argument("--verbose", "-v", default=False, action="store_true",
                        help="Turn on verbose mode")

    args = parser.parse_args()

    import tensorflow as tf
    from tensorflow.python.keras import backend as K
    config = tf.compat.v1.ConfigProto()
    config.gpu_options.per_process_gpu_memory_fraction = 0.2
    K.set_session(tf.compat.v1.Session(config=config))

    # init SL Policy
    sl_policy = CNNPolicy(init_network=True)
    sl_policy.model.load_weights(args.policy_weights)

    # init tree hash
    set_hash_size(args.node_hash_size)
    initialize_hash()
    initialize_uct_hash()

    # init rollout policy
    read_rands(args.mt_rands_file)
    x33_size = init_x33_hash(args.x33_csv)
    d12_rsp_size = init_d12_rsp_hash(args.d12_rsp_csv)
    d12_size = init_d12_hash(args.d12_csv)

    initialize_const(0, x33_size, d12_rsp_size, d12_size)
    set_rollout_parameter(args.rollout_weights)
    set_tree_parameter(args.tree_weights)

    mcts = PyMCTS(sl_policy, args.policy_temp, n_threads=args.threads, read_ahead=args.read_ahead)
    set_mcts(mcts)

    if args.read_ahead:
        start_thread = threading.Thread(target=mcts.start_pondering)
        start_thread.setDaemon(True)
        start_thread.start()

    server = pyjsonrpc.ThreadingHttpServer(
        server_address = (args.host, args.port),
        RequestHandlerClass = MCTSRequestHandler
    )

    print('Starting MCTS server ...')
    print('URL: http://{:s}:{:d}'.format(args.host, args.port))
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        if args.read_ahead:
            mcts.stop_pondering()
            start_thread.join(10)
        server.shutdown()
        print('Server shut down')

